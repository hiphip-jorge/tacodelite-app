name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-complete: ${{ steps.build.outputs.complete }}
      terraform-complete: ${{ steps.terraform.outputs.complete }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Install dependencies
      id: deps
      run: npm ci

    - name: Build Lambda functions
      run: |
        echo "📦 Building Lambda functions..."
        ./scripts/build-lambda.sh

    - name: Build production app
      id: build
      run: |
        npm run build:production
        echo "complete=true" >> $GITHUB_OUTPUT
      env:
        VITE_API_URL: "https://tacodelitewestplano.com/prod"
        VITE_USE_MOCK: "false"
        VITE_ENVIRONMENT: "production"
        VITE_APP_NAME: "Taco Delite"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform init
      id: terraform
      run: |
        # Initialize Terraform (no plan to avoid state lock issues)
        terraform -chdir=terraform init

        # Select production workspace
        terraform -chdir=terraform workspace select production || terraform -chdir=terraform workspace new production
        echo "complete=true" >> $GITHUB_OUTPUT

  deploy-production:
    needs: setup
    runs-on: ubuntu-latest
    environment: production  # Manual approval required
    if: github.ref == 'refs/heads/main'  # Only run on main branch pushes

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Lambda functions
      run: |
        echo "📦 Building Lambda functions..."
        echo "🔍 Current directory: $(pwd)"
        echo "🔍 Lambda directory contents before build:"
        ls -la lambda/ || echo "❌ Lambda directory not found"
        echo ""
        echo "🔧 Making build script executable..."
        chmod +x scripts/build-lambda.sh
        echo "🚀 Running build script..."
        ./scripts/build-lambda.sh
        echo ""
        echo "🔍 Lambda directory contents after build:"
        ls -la lambda/ || echo "❌ Lambda directory not found"
        echo ""
        echo "🔍 Checking specific files:"
        ls -la lambda/getMenuVersion.zip lambda/incrementMenuVersion.zip || echo "❌ Specific files not found"

    - name: Deploy infrastructure
      run: |
        echo "🏭 Deploying to PRODUCTION environment..."
        
        # Verify Lambda zip files exist before Terraform
        echo "🔍 Verifying Lambda zip files before Terraform..."
        echo "📁 Current directory: $(pwd)"
        echo "📁 Lambda directory contents:"
        ls -la lambda/ | grep -E "(getMenuVersion|incrementMenuVersion)" || echo "❌ Files not found in lambda/"
        echo ""
        echo "📁 Testing Terraform's relative path:"
        ls -la ../lambda/getMenuVersion.zip ../lambda/incrementMenuVersion.zip || echo "❌ Files not found with ../lambda/ path"
        echo ""
        
        # Initialize Terraform (quick since we're using same runner)
        terraform -chdir=terraform init
        
        # Test path from terraform directory
        echo "📁 Testing from terraform directory:"
        cd terraform
        echo "📁 Current directory: $(pwd)"
        ls -la ../lambda/getMenuVersion.zip ../lambda/incrementMenuVersion.zip || echo "❌ Files not found from terraform directory"
        cd ..
        echo ""
        
        # Select production workspace
        terraform -chdir=terraform workspace select production || terraform -chdir=terraform workspace new production
        
        # Plan the changes
        echo "📋 Planning Terraform changes..."
        terraform -chdir=terraform plan -var-file=../env_files/production.tfvars -out=tfplan
        
        # Show plan summary
        echo "📊 Plan Summary:"
        terraform -chdir=terraform show -no-color tfplan | head -20
        echo "... (see full plan above)"
        
        # Apply the plan
        echo "🚀 Applying Terraform changes..."
        terraform -chdir=terraform apply tfplan

    - name: Upload static assets
      run: |
        echo "📤 Uploading static assets..."
        ./scripts/upload-static.sh --environment production

    - name: Get deployment info
      run: |
        echo "📋 Deployment Summary:"
        terraform -chdir=terraform output
